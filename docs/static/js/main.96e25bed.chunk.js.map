{"version":3,"sources":["components/Input.js","components/TaskTodo.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","list","setList","task_copy","name","isComplete","className","type","onChange","event1","target","value","onClick","event2","TaskTodo","task","index","htmlFor","id","checked","console","log","filter","indexOf","App","useState","style","width","borderTop","map","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2RAwCeA,EArCD,SAAAC,GAAS,IAIXC,EAAmBD,EAAnBC,KAAOC,EAAYF,EAAZE,QAGXC,EACJ,CACIC,KAAM,GACNC,YAAY,GAehB,OACI,yBAAKC,UAAU,uBAEX,2BAAOA,UAAU,eAAeC,KAAK,OAAOH,KAAK,YAAYI,SAdpD,SAAAC,GACbN,EAAUC,KAAOK,EAAOC,OAAOC,SAc3B,4BAAQL,UAAU,iCAAiCM,QAV3C,SAAAC,GACZA,EAAOH,OAAOC,MAAM,GACpBT,EAAQ,GAAD,mBAAKD,GAAL,CAAWE,OAQd,gBCmBGW,EAhDE,SAAAd,GAAU,IAGfe,EAAkCf,EAAlCe,KAAOb,EAA2BF,EAA3BE,QAAUc,EAAiBhB,EAAjBgB,MAAQf,EAASD,EAATC,KAyBjC,OAEI,yBAAKK,UAAU,0BACX,gCAAOS,EAAKX,KAAZ,KACA,yBAAKE,UAAU,aACX,2BAAOW,QAAQ,eAAf,eAA0CF,EAAKX,KAA/C,KACA,2BAAOG,KAAK,WAAWW,GAAG,cAAcV,SAnBnC,SAAAK,GACbZ,EAAKe,GAAOX,YAAcJ,EAAKe,GAAOX,WACtCH,EAAQ,YAAID,KAiB0DkB,QAAUJ,EAAKV,aAC7E,4BAAQO,QA7BJ,SAAAH,GACZW,QAAQC,IAAKL,GACbI,QAAQC,IAAKpB,GACbC,GAAS,WACL,OAAOD,EAAKqB,QAAQ,SAAAP,GAAI,OAAId,EAAKsB,QAAQR,KAAUC,SAyBnBV,UAAU,yBAAtC,QCLDkB,MA3Bf,WAAgB,IAAD,EAEaC,mBAC1B,IAHa,mBAENxB,EAFM,KAECC,EAFD,KAOd,OACI,yBAAKI,UAAU,gBAAgBoB,MAAO,CAACC,MAAM,UAE/C,kBAAC,EAAD,CAAO1B,KAAOA,EAAOC,QAAUA,IAE/B,wBAAIwB,MAAO,CAACE,UAAU,mBAGrB3B,EAAK4B,KAAK,SAACd,EAAMe,GAAP,OACT,kBAAC,EAAD,CAAUf,KAAOA,EAAOb,QAAUA,EAAUc,MAAOc,EAAG7B,KAAOA,SCV9C8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.96e25bed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nconst Input = props => {\r\n\r\n\r\n    // props is an object containing an array & a function\r\n    const { list , setList } = props;\r\n\r\n\r\n    let task_copy =\r\n    {\r\n        name: \"\",\r\n        isComplete: false\r\n    }\r\n    \r\n\r\n    const onChange = event1 => {\r\n        task_copy.name = event1.target.value;\r\n    }// *** onChange => function ***\r\n\r\n\r\n    const onClick = event2 => {\r\n        event2.target.value=\"\";\r\n        setList([...list, task_copy]);\r\n    }// *** onChange => function ***\r\n\r\n\r\n    return(\r\n        <div className=\"container w-50 mt-3\">\r\n\r\n            <input className='form-control' type='text' name='task_todo' onChange={ onChange }></input>\r\n            <button className='btn btn-primary btn-block mt-1' onClick={ onClick }>Add a Task</button>\r\n\r\n        </div>\r\n    );\r\n}// ** Input component ***********************************************\r\n\r\n\r\n\r\nexport default Input;\r\n","import React from 'react';\r\n\r\n\r\nconst TaskTodo = props => {\r\n\r\n\r\n    const { task , setList , index , list } = props;\r\n\r\n\r\n    const onClick = event1 => {\r\n        console.log( index );\r\n        console.log( list );\r\n        setList( () => { \r\n            return list.filter( task => list.indexOf(task) !== index);\r\n        });\r\n    }// *** onClick => function ***\r\n\r\n\r\n    const onChange = event2 => {\r\n        list[index].isComplete = !list[index].isComplete;\r\n        setList([...list ]);\r\n\r\n        // setList( () => {\r\n        //     let temp = list.splice(index,1);\r\n        //     temp.isComplete = !temp.isComplete;\r\n        //     return {...list, temp};\r\n        // });\r\n    }// *** onChange => function ***\r\n\r\n\r\n\r\n    return(\r\n\r\n        <div className='container bg-secondary'>\r\n            <h4> { task.name } </h4>\r\n            <div className='container'>\r\n                <label htmlFor='make_choice'> Completed? {task.name} </label>\r\n                <input type='checkbox' id='make_choice' onChange={ onChange } checked={ task.isComplete } />\r\n                <button onClick={ onClick } className='btn btn-sm btn-danger'>X</button>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n\r\n\r\n\r\n}// ** TaskTodo component ********************************************\r\n\r\n\r\n\r\nexport default TaskTodo;\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Input from './components/Input';\nimport TaskTodo from './components/TaskTodo';\n\n\nfunction App() {\n\n\tconst [ list , setList ] = useState(\n\t\t[]\n\t);\n\n\n\treturn (\n    \t<div className=\"App container\" style={{width:'800px'}}>\n\n\t\t\t<Input list={ list } setList={ setList }/>\n\n\t\t\t<hr style={{borderTop:'solid red 2px'}}/>\n\n\t\t\t{\n\t\t\t\tlist.map( (task, i) =>\n\t\t\t\t\t<TaskTodo task={ task } setList={ setList } index={i} list={ list } />\n\t\t\t\t)\n\t\t\t}\n\t\t\n\n    \t</div>\n\t);\n} // ** App component ************************************************\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}